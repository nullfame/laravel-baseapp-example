{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\n// Initalize the baseapp namespace\nwindow.baseapp = {};\n\n// Require component JavaScripts\nrequire(\"./widgets/lib.js\");\nrequire(\"./widgets/menu.js\");\nrequire(\"./widgets/debugbar.js\");\nrequire(\"./widgets/schemable.js\");\n\n},{\"./widgets/debugbar.js\":2,\"./widgets/lib.js\":3,\"./widgets/menu.js\":4,\"./widgets/schemable.js\":5}],2:[function(require,module,exports){\n'use strict';\n\n$(document).ready(function () {\n    // Show debug bar when open is clicked\n    $('#baseapp-debugbar-open').click(function (event) {\n        $('body').toggleClass('debugClosed'); // Set body.debugClosed to remove the top padding\n        baseapp.eraseCookie('debugClosed'); // Clear the cookie telling BaseApp to default closed\n        event.preventDefault();\n    });\n\n    // Hide debug bar when collapse is clicked\n    $('#baseapp-debugbar-collapse').click(function (event) {\n        $('body').toggleClass('debugClosed');\n        baseapp.createCookie('debugClosed', true);\n        event.preventDefault();\n    });\n});\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\n// http://www.quirksmode.org/js/cookies.html\n\nwindow.baseapp.createCookie = function (name, value, days) {\n    if (days) {\n        var date = new Date();\n        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n        var expires = \"; expires=\" + date.toGMTString();\n    } else var expires = \"\";\n    document.cookie = name + \"=\" + value + expires + \"; path=/\";\n};\n\nwindow.baseapp.readCookie = function (name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(';');\n    for (var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) == ' ') {\n            c = c.substring(1, c.length);\n        }if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\n    }\n    return null;\n};\n\nwindow.baseapp.eraseCookie = function (name) {\n    baseapp.createCookie(name, \"\", -1);\n};\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n$(document).ready(function () {\n    $('#navToggle').click(function () {\n        $('nav#navigation').toggle();\n    });\n});\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\n// Currently only handles \"new\" case.  Need to improve it to handle \"edit\" case.  Perhaps check for presence of schemable_data variable\n\nwindow.baseapp.createSchemableFields = function () {\n\t//alert('createSchemableFields is firing');\n\t//if ($('#schema_template_id').val().length !== 0) {\n\tif ($('#schema_template_id').length > 0 && $('#schema_template_id').val().length) {\n\t\t//alert('createdSchemableFields is actually doing something');\n\t\t// TODO: Be craftier in the future, think about only striking out fields that aren't present in the newly selected schema template\n\t\t$('div#schemable').empty();\n\t\t$.getJSON('/api/v1/fetchActiveSchema/' + $('#schema_template_id').val(), function (data) {\n\n\t\t\t// Is this a readonly (view) form?\n\t\t\tvar readonlyView = $('#main form').first().hasClass('readonly');\n\t\t\tvar readonlyAttr = '';\n\t\t\tvar disabledAttr = '';\n\t\t\tvar requiredClass = 'required';\n\t\t\tif (readonlyView) {\n\t\t\t\treadonlyAttr = ' readonly';\n\t\t\t\tdisabledAttr = ' disabled';\n\t\t\t\trequiredClass = '';\n\t\t\t}\n\n\t\t\t$.each(data.display, function (rowkey, row) {\n\t\t\t\t$.each(row, function (colkey, col) {\n\t\t\t\t\tvar fieldname = col.key;\n\t\t\t\t\tvar label = col.label;\n\t\t\t\t\tvar type = data.fields[fieldname].type;\n\t\t\t\t\tvar required = data.fields[fieldname].required;\n\t\t\t\t\tvar value = data.fields[fieldname].value;\n\t\t\t\t\tif (required) {\n\t\t\t\t\t\trequired = 'required=\"required\"';\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequired = '';\n\t\t\t\t\t\trequiredClass = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tvar $newFieldset = $('<fieldset class=\"form-group\"></fieldset>');\n\n\t\t\t\t\t$newFieldset.append('<label for=\"schemable__' + fieldname + '\" class=\"' + requiredClass + '\">' + label + '</label>');\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\t$newFieldset.append('<input ' + required + ' name=\"schemable__' + fieldname + '\" type=\"text\" class=\"form-control\"' + readonlyAttr + '>');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\t$newFieldset.append('<div class=\"input-group\"><input ' + required + ' name=\"schemable__' + fieldname + '\" type=\"text\" class=\"form-control schemableDatepicker\"' + readonlyAttr + '><span class=\"input-group-addon datepicker-icon schemableDatepicker-icon\"><i class=\"fa fa-calendar\"></i></span></div><script>$(\".schemableDatepicker\").datepicker(); $(\".schemableDatepicker-icon\").click(function() {$(this).closest(\"div.input-group\").find(\".schemableDatepicker\").datepicker(\"show\");});</script>');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'textarea':\n\t\t\t\t\t\t\t// <textarea name=\"data\" cols=\"50\" rows=\"10\" id=\"data\"></textarea>\n\t\t\t\t\t\t\t$newFieldset.append('<textarea ' + required + ' name=\"schemable__' + fieldname + '\" class=\"form-control\"' + readonlyAttr + '></textarea>');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'select':\n\t\t\t\t\t\t\tvar $newSelect = $('<select ' + required + ' name=\"schemable__' + fieldname + '\" class=\"form-control\"' + disabledAttr + '></select>');\n\t\t\t\t\t\t\t// TODO: handle setting placeholder at top?\n\t\t\t\t\t\t\t$.each(data.fields[fieldname]['values'], function (optionkey, optionlabel) {\n\t\t\t\t\t\t\t\t// TODO: handle setting one of the options as selected\n\t\t\t\t\t\t\t\t$('<option value=\"' + optionkey + '\">' + optionlabel + '</option>').appendTo($newSelect);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t$newFieldset.append($newSelect);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'radio':\n\t\t\t\t\t\t\t// To include radio buttons in the label we need to reset $newFieldset\n\t\t\t\t\t\t\t$newFieldset = $('<fieldset class=\"radio\"></fieldset>');\n\t\t\t\t\t\t\t$newFieldset.append('<label class=\"heading ' + requiredClass + '\">' + label + '</label>');\n\t\t\t\t\t\t\t$.each(data.fields[fieldname]['values'], function (radiokey, radiolabel) {\n\t\t\t\t\t\t\t\t$newFieldset.append('<label><input ' + required + ' type=' + '\"radio\" name=\"schemable__' + fieldname + '\" value=\"' + radiokey + '\"' + disabledAttr + '> ' + radiolabel + '</label>');\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'checkbox':\n\t\t\t\t\t\t\t// To include checkbox in the label we need to reset $newFieldset\n\t\t\t\t\t\t\t$newFieldset = $('<fieldset class=\"checkbox\"></fieldset>');\n\t\t\t\t\t\t\t$newFieldset.append('<label class=\"' + requiredClass + '\"><input ' + required + ' name=\"schemable__' + fieldname + '\" type=\"checkbox\" value=\"' + value + '\"' + disabledAttr + '>' + label + '</label>');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'multicheckbox':\n\t\t\t\t\t\t\t// To include radio buttons in the label we need to reset $newFieldset\n\t\t\t\t\t\t\t$newFieldset = $('<fieldset class=\"checkbox\"></fieldset>');\n\t\t\t\t\t\t\t$newFieldset.append('<label class=\"heading ' + requiredClass + '\">' + label + '</label>');\n\t\t\t\t\t\t\t$.each(data.fields[fieldname]['values'], function (radiokey, radiolabel) {\n\t\t\t\t\t\t\t\t$newFieldset.append('<label><input ' + required + ' type=' + '\"checkbox\"  name=\"schemable__' + fieldname + '_' + radiokey + '\" ' + disabledAttr + '> ' + radiolabel + '</label>');\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'multifiscal':\n\t\t\t\t\t\tcase 'multiyear':\n\t\t\t\t\t\t\t$newFieldset = $('<fieldset class=\"form-group\"></fieldset>');\n\t\t\t\t\t\t\tvar yearLabel = \"year\";\n\t\t\t\t\t\t\tif (type == 'multifiscal') yearLabel = 'Fiscal Year';\n\n\t\t\t\t\t\t\t// Let the year options go back and forth 20 years with the current year as the default\n\t\t\t\t\t\t\tvar today = new Date();\n\t\t\t\t\t\t\tvar currentYear = today.getFullYear();\n\t\t\t\t\t\t\tif (type == 'multifiscal' && today.getMonth() >= 9) currentYear++;\n\t\t\t\t\t\t\tvar yearOptions = \"\";\n\t\t\t\t\t\t\tfor (var year = currentYear - 25; year < currentYear + 26; year++) {\n\t\t\t\t\t\t\t\tvar selected = year == currentYear ? \" selected\" : \"\";\n\t\t\t\t\t\t\t\tyearOptions += \"<option\" + selected + \">\" + year + \"</option>\";\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$newFieldset.append('\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\"row\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\"col-lg-8\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<table id=\"schemable__' + fieldname + '\" schemable=\"' + type + '\" class=\"addremove\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<th style=\"white-space: nowrap; padding-right: 1em;\"><label class=\"' + requiredClass + '\">' + yearLabel + '</label></th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<th width=\"100%\"><label class=\"' + requiredClass + '\">' + label + '</label></th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<th class=\"addremove-action\">&nbsp;</th>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<select name=\"schemable_multiyear__' + fieldname + '__year__0\" class=\"form-control\" ' + disabledAttr + ' ' + required + '>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<option></option>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t' + yearOptions + '\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\"text\" name=\"schemable_multiyear__' + fieldname + '__value__0\" class=\"form-control\"  ' + disabledAttr + ' ' + required + '>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td class=\"addremove-action\"><a href=\"#\" class=\"link-button-remove\" tabindex=\"-1\"><i class=\"fa fa-remove\"></i></a></td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</table>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<p class=\"addremove-action\"><a href=\"#\" class=\"link-button-plus\" tabindex=\"-1\"><i class=\"fa fa-plus\"></i> Add ' + label + '</a></p>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// Remove add/remove actions when this is read-only\n\t\t\t\t\tif (readonlyAttr) {\n\t\t\t\t\t\t$newFieldset.find(\".addremove-action\").remove();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Otherwise attach events to them\n\t\t\t\t\t\t$newFieldset.find(\".addremove-action .link-button-remove\").click(window.baseapp.removeRow);\n\t\t\t\t\t\t$newFieldset.find(\".addremove-action .link-button-plus\").click(window.baseapp.addRow);\n\t\t\t\t\t}\n\n\t\t\t\t\t$('div#schemable').append($newFieldset);\n\t\t\t\t});\n\t\t\t});\n\t\t\t// this data population occurs once UI has updated due to setTimeout putting populateSchemableData() on the event loop\n\t\t\tsetTimeout(function () {\n\t\t\t\tbaseapp.populateSchemableData();\n\t\t\t}, 0);\n\t\t});\n\t}\n};\n\nwindow.baseapp.populateSchemableData = function () {\n\tif (typeof schemable_data !== 'undefined') {\n\t\t//alert('latest change');\n\t\t$.each(schemable_data, function (fieldname, fieldvalue) {\n\t\t\t//alert ('field: ' + fieldname + ' fieldvalue:' + fieldvalue);\n\t\t\tvar element = $('div#schemable [name=' + fieldname + ']');\n\t\t\t//console.log(element);\n\t\t\tif (element.is('input[type=text]')) {\n\t\t\t\t// make sure isn't already set\n\t\t\t\telement.val(fieldvalue);\n\t\t\t\t//alert('is textinput');\n\t\t\t} else if (element.is('input[type=radio]')) {\n\t\t\t\telement.filter('[value=\"' + fieldvalue + '\"]').prop('checked', true);\n\t\t\t} else if (element.is('input[type=checkbox]')) {\n\t\t\t\telement.prop('checked', true);\n\t\t\t} else if (element.is('textarea')) {\n\t\t\t\telement.val(fieldvalue);\n\t\t\t\t//alert('is textarea');\n\t\t\t} else if (element.is('input')) {\n\t\t\t\t//alert('is input');\n\t\t\t} else if (element.is('select')) {\n\t\t\t\t//alert('is select');\n\t\t\t\telement.val(fieldvalue);\n\t\t\t} else {\n\t\t\t\t// See if this is a multiyear/multifiscal field (or another general multi-row table)\n\t\t\t\tvar schemableTable = $('div#schemable table#' + fieldname);\n\t\t\t\tvar type = schemableTable.attr(\"schemable\");\n\t\t\t\tif (!schemableTable || !type) return;\n\t\t\t\tvar schemableBody = schemableTable.children(\"tbody\").first();\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'multifiscal':\n\t\t\t\t\tcase 'multiyear':\n\t\t\t\t\t\t// Loop through the values in fieldvalue.  Create a new row for each of them.  First row is a special case\n\t\t\t\t\t\tvar lastRow = null;\n\t\t\t\t\t\tObject.keys(fieldvalue).sort().forEach(function (year, index) {\n\t\t\t\t\t\t\t// Figure out which row to work on\n\t\t\t\t\t\t\t// Either it's the first row or we clone the last row\n\t\t\t\t\t\t\tvar currentRow;\n\t\t\t\t\t\t\tif (!lastRow) {\n\t\t\t\t\t\t\t\tcurrentRow = schemableBody.children(\"tr\").last();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcurrentRow = lastRow.clone();\n\t\t\t\t\t\t\t\tschemableBody.append(currentRow);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Update values and names:\n\n\t\t\t\t\t\t\t// Being naive about finding fields since we only have one select and one input\n\t\t\t\t\t\t\tvar currentSelect = currentRow.find(\"select\");\n\t\t\t\t\t\t\tcurrentSelect.val(year);\n\t\t\t\t\t\t\tvar currentInput = currentRow.find(\"input\");\n\t\t\t\t\t\t\tcurrentInput.val(fieldvalue[year]);\n\n\t\t\t\t\t\t\t// If this is not the first row we need to increment the index in the names\n\t\t\t\t\t\t\tif (lastRow) {\n\t\t\t\t\t\t\t\twindow.baseapp.updateNameIndex(currentSelect);\n\t\t\t\t\t\t\t\twindow.baseapp.updateNameIndex(currentInput);\n\t\t\t\t\t\t\t\tcurrentRow.find(\".addremove-action .link-button-remove\").click(window.baseapp.removeRow);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Update the last row\n\t\t\t\t\t\t\tlastRow = currentRow;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t//console.log('Found schemable table with unsupported type: \"'+ type +'\"');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n\nwindow.baseapp.addRow = function (event) {\n\tvar $table = $(event.target).closest(\"div\").find(\"table\").first();\n\tvar $lastRow = $table.find(\"tr\").last();\n\tvar $newRow = $lastRow.clone();\n\n\t// Increment the year but leave the contents\n\t$newRow.find(\"select\").val(parseInt($lastRow.find(\"select\").val()) + 1);\n\twindow.baseapp.updateNameIndex($newRow.find(\"select\"));\n\twindow.baseapp.updateNameIndex($newRow.find(\"input\"));\n\t$newRow.find(\".addremove-action .link-button-remove\").click(window.baseapp.removeRow);\n\n\t$table.children(\"tbody\").append($newRow);\n\tevent.preventDefault();\n};\n\nwindow.baseapp.removeRow = function (event) {\n\t// Don't remove the last row\n\tif ($(event.target).closest(\"tbody\").find(\"tr\").length > 1) {\n\t\t$(event.target).closest(\"tr\").remove();\n\t}\n\tevent.preventDefault();\n};\n\nwindow.baseapp.updateNameIndex = function (element) {\n\tvar results = /^(.+__)(\\d+)$/.exec(element.attr(\"name\"));\n\tvar prefix = results[1];\n\tvar index = parseInt(results[2]);\n\telement.attr(\"name\", prefix + (index + 1));\n};\n\n$(document).ready(function () {\n\tbaseapp.createSchemableFields(); // run initially, in case schema_template_id is already set to something\n\n\t$('#schema_template_id').change(baseapp.createSchemableFields);\n});\n\n},{}]},{},[1]);\n"],"file":"app.js"}